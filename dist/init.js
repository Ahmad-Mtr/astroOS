/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '../packages/shell/src/models/directory_model'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '../packages/shell/src/repo/shell_api'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _user_user_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user/user_api */ \"./src/user/user_api.js\");\n\r\n\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n  const loadingElement = document.querySelector(\".loading\");\r\n  const loadedContentElement = document.querySelector(\".loaded-content\");\r\n  \r\n  console.log(\"@app Loading App.... \");\r\n  // Show loading animation\r\n  loadingElement.style.display = \"block\";\r\n\r\n  try {\r\n    console.log(\"@app Creating DB.... \");\r\n    await initDb();\r\n    console.log(\"@app Created DB ðŸ’ª\");\r\n\r\n    await (0,_user_user_api__WEBPACK_IMPORTED_MODULE_1__.createIfGuestUser)()\r\n      .then((result) => {\r\n        console.log('@inintttt' + `${result}`);\r\n        let res = result;\r\n        res == \"user\"\r\n          ? console.log(\"Guest account exists\")\r\n          : res == \"none\"\r\n          ? console.log(\"no Guest, Created a new Guest account\")\r\n          : console.log(\"@initOS -- Unexpected result: \", res);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"@initOS :: init_os.js :: #promiseError.\", error);\r\n      });\r\n\r\n    const directories = await fetchDirectoriesFromIndexedDB();\r\n\r\n    console.log(\"@app  fetching Directories.... \");\r\n    const directoryModels = directories.map(convertToDirectoryModel);\r\n    console.log(\"@app fetched Directories ðŸ’ª\", directoryModels);\r\n\r\n    console.log(\"@app  fetching nested Directories.... \");\r\n    const nestedDirectories = nestDirectories(directoryModels);\r\n    console.log(\"@app fetched nested Directories ðŸ’ª\", nestedDirectories);\r\n\r\n    console.log(\"@app  get Root Directory.... \");\r\n    const _rootDir = getRootDirectory(nestedDirectories);\r\n    console.log(\"@app get Root Directory ðŸ’ª\", _rootDir);\r\n    \r\n\r\n    // @TODO: convert Files to File Handles Model ?\r\n    // @TODO: Nest Sub-directories _/\r\n    // @TODO: Find _ROOT_\r\n    // @TODO: export default _ROOT_\r\n\r\n    //await createDirectoryDb(root, '');\r\n\r\n    // Hide loading animation\r\n    loadingElement.style.display = \"none\";\r\n\r\n    // Display loaded content\r\n    loadedContentElement.style.display = \"block\";\r\n    displayDirectories([_rootDir], loadedContentElement);\r\n  } catch (error) {\r\n    console.error(\"Error loading directories:\", error);\r\n    loadingElement.textContent = \"Failed to load data\";\r\n  }\r\n});\r\n\r\nasync function fetchDirectoriesFromIndexedDB() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(\"directories\")) {\r\n        db.createObjectStore(\"directories\", { keyPath: \"id\" });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      const transaction = db.transaction([\"directories\"], \"readonly\");\r\n      const objectStore = transaction.objectStore(\"directories\");\r\n      const directories = [];\r\n\r\n      objectStore.openCursor().onsuccess = (event) => {\r\n        const cursor = event.target.result;\r\n        if (cursor) {\r\n          directories.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(directories);\r\n        }\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n        reject(event.target.error);\r\n      };\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n}\r\nasync function initDb() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(\"astroOS\", 1);\r\n    request.onerror = function (event) {\r\n      // Handle errors\r\n      console.log(\"@initDb: Database open ERROR\");\r\n      reject(event.target.error);\r\n    };\r\n    request.onsuccess = function (event) {\r\n      resolve();\r\n    };\r\n\r\n    request.onupgradeneeded = function (event) {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(\"directories\")) {\r\n        db.createObjectStore(\"directories\", { keyPath: \"id\" });\r\n      }\r\n      if (!db.objectStoreNames.contains(\"files\")) {\r\n        db.createObjectStore(\"files\", { keyPath: \"id\" });\r\n      }\r\n      if (!db.objectStoreNames.contains(\"users\")) {\r\n        db.createObjectStore(\"users\", { keyPath: \"username\" });\r\n      }\r\n      //fetchDataDB();\r\n      console.log(\"AstroOS DB created successfully âœ¨\");\r\n      resolve();\r\n    };\r\n  });\r\n}\r\nfunction nestDirectories(directories) {\r\n  const directoryMap = new Map();\r\n\r\n  // Initialize map\r\n  directories.forEach((directory) => {\r\n    directoryMap.set(directory.id, { ...directory, directories: [] });\r\n  });\r\n\r\n  // Nest directories\r\n  directories.forEach((directory) => {\r\n    const parentPath = directory.path;\r\n    if (parentPath && directoryMap.has(parentPath)) {\r\n      directoryMap\r\n        .get(parentPath)\r\n        .directories.push(directoryMap.get(directory.id));\r\n    }\r\n  });\r\n\r\n  // Find root directories\r\n  const nestedDirectories = [];\r\n  directoryMap.forEach((directory) => {\r\n    const parentPath = directory.path;\r\n    if (!parentPath || !directoryMap.has(parentPath)) {\r\n      nestedDirectories.push(directory);\r\n    }\r\n  });\r\n\r\n  return nestedDirectories;\r\n}\r\n\r\nfunction convertToDirectoryModel(directory) {\r\n  return new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../packages/shell/src/models/directory_model'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\r\n    id: directory.id, // Absolute path\r\n    path: directory.path, // Parent path\r\n    name: directory.name,\r\n    directories: directory.directories || [],\r\n    files: directory.files || [],\r\n    size: directory.size,\r\n    dateCreated: directory.dateCreated,\r\n    dateModified: directory.dateModified,\r\n  });\r\n}\r\n// function getParentPath(path) {\r\n//     const pathParts = path.split('/');\r\n//     pathParts.pop(); // Remove the current directory\r\n//     return pathParts.length > 0 ? pathParts.join('/') : null;\r\n// }\r\n\r\nfunction getRootDirectory(nestedDirectories) {\r\n  // Assuming there's only one root directory for simplicity\r\n  return nestedDirectories.length > 0 ? nestedDirectories[0] : null;\r\n}\r\n\r\nfunction displayDirectories(directories, container) {\r\n  directories.forEach((directory) => {\r\n    const directoryElement = document.createElement(\"div\");\r\n    directoryElement.textContent = `Name: ${directory.name}, Path: ${directory.path}`;\r\n\r\n    if (directory.directories.length > 0) {\r\n      const nestedContainer = document.createElement(\"div\");\r\n      nestedContainer.style.marginLeft = \"20px\";\r\n      displayDirectories(directory.directories, nestedContainer);\r\n      directoryElement.appendChild(nestedContainer);\r\n    }\r\n\r\n    container.appendChild(directoryElement);\r\n  });\r\n}\r\n// ----------------------------------------------\r\n// async function createIfGuestUser() {\r\n//   return new Promise((resolve, reject) => {\r\n//     const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n//     request.onerror = function (event) {\r\n//       reject(\"Database error: \" + event.target.errorCode);\r\n//     };\r\n\r\n//     request.onsuccess = function (event) {\r\n//       const db = event.target.result;\r\n//       // Create transaction and object store\r\n//       const transaction = db.transaction([\"users\"], \"readwrite\");\r\n//       const store = transaction.objectStore(\"users\");\r\n\r\n//       const getRequest = store.get(\"user\");\r\n\r\n//       getRequest.onsuccess = function (event) {\r\n//         const guest = event.target.result;\r\n//         if (guest) {\r\n//           // Meaning there's a guest\r\n\r\n//           resolve(guest.username);\r\n//         } else {\r\n//           saveUserAccount(\"user\", \"password\");\r\n//           resolve(\"none\");\r\n//         }\r\n//       };\r\n\r\n//       getRequest.onerror = function (event) {\r\n//         reject(\r\n//           \"@createGuestUser() :: user_api.js Error: \" + event.target.errorCode\r\n//         );\r\n//       };\r\n//     };\r\n//   });\r\n// }\r\n\r\nfunction saveUserAccount(username, password) {\r\n  // Open or create IndexedDB database\r\n  const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n  request.onerror = function (event) {\r\n    console.error(\"Database error: \" + event.target.errorCode);\r\n  };\r\n\r\n  request.onsuccess = function (event) {\r\n    const db = event.target.result;\r\n    // Create transaction and object store\r\n    const transaction = db.transaction([\"users\"], \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n    // Add user account data\r\n    const account = { username: username, password: password };\r\n    const addRequest = store.add(account);\r\n\r\n    addRequest.onsuccess = function (event) {\r\n      console.log(\"User account added successfully\");\r\n    };\r\n\r\n    addRequest.onerror = function (event) {\r\n      console.error(\"Error adding user account: \" + event.target.errorCode);\r\n    };\r\n  };\r\n}\r\n//--------------------------\r\nfunction createDirectoryDb(directory, pid) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(\"astroOS\");\r\n\r\n    request.onsuccess = function (event) {\r\n      const db = event.target.result;\r\n\r\n      const transaction = db.transaction([\"directories\"], \"readwrite\");\r\n      const objectStore = transaction.objectStore(\"directories\");\r\n      const requestAdd = objectStore.add({\r\n        id: directory.id,\r\n        path: directory.path,\r\n        name: directory.name,\r\n        directories: directory.directories,\r\n        files: directory.files,\r\n        size: directory.size,\r\n        dateCreated: directory.dateCreated,\r\n        dateModified: directory.dateModified,\r\n      });\r\n\r\n      // @might-break\r\n      if (pid != \"\") {\r\n        // console.log(\"@pid\", pid);\r\n        const requestGet = objectStore.get(pid);\r\n        requestGet.onsuccess = function (event) {\r\n          const existingFile = event.target.result;\r\n          //console.log(\"@updateDirectoryDb() - existingFile: \", existingFile);\r\n          if (existingFile) {\r\n            ///////\r\n            let records = existingFile.directories;\r\n            records.push(directory);\r\n\r\n            existingFile.directories = records;\r\n            /////////\r\n            existingFile.dateModified = new Date().toISOString();\r\n\r\n            const putRequest = objectStore.put(existingFile);\r\n\r\n            console.log(\"@updateDirectoryDb() - putFile: \", existingFile);\r\n            putRequest.onsuccess = function (event) {\r\n              console.log(\"Parent Data updated in IndexedDB\");\r\n            };\r\n            putRequest.onerror = function (event) {\r\n              reject(\"Put request error:\", event.target.error);\r\n            };\r\n          } else {\r\n            reject(\"Document not found:\", directory.path);\r\n          }\r\n          resolve(\"Success\");\r\n        };\r\n      }\r\n\r\n      requestAdd.onsuccess = function (event) {\r\n        console.log(\"Directory data added to IndexedDB\");\r\n      };\r\n      transaction.oncomplete = function (event) {\r\n        console.log(\"Transaction completed: Directory data saved to IndexedDB\");\r\n      };\r\n      transaction.onerror = function (event) {\r\n        console.error(\"Transaction error:\", event.target.error);\r\n      };\r\n    };\r\n\r\n    request.onerror = function (event) {\r\n      reject(\"Database error:\", event.target.error);\r\n    };\r\n  });\r\n}\r\n\n\n//# sourceURL=webpack://astroos/./src/init.js?");

/***/ }),

/***/ "./src/user/user_api.js":
/*!******************************!*\
  !*** ./src/user/user_api.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createIfGuestUser: () => (/* binding */ createIfGuestUser),\n/* harmony export */   getUsername: () => (/* binding */ getUsername),\n/* harmony export */   saveUserAccount: () => (/* binding */ saveUserAccount)\n/* harmony export */ });\nasync function createIfGuestUser() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n    request.onerror = function (event) {\r\n      reject(\"Database error: \" + event.target.errorCode);\r\n    };\r\n\r\n    request.onsuccess = function (event) {\r\n      const db = event.target.result;\r\n      // Create transaction and object store\r\n      const transaction = db.transaction([\"users\"], \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const getRequest = store.get(\"user\");\r\n\r\n      getRequest.onsuccess = function (event) {\r\n        const guest = event.target.result;\r\n        if (guest) {\r\n          // Meaning there's a guest\r\n\r\n          resolve(guest.username);\r\n        } else {\r\n          saveUserAccount(\"user\", \"password\");\r\n          resolve(\"none\");\r\n        }\r\n      };\r\n\r\n      getRequest.onerror = function (event) {\r\n        reject(\r\n          \"@createGuestUser() :: user_api.js Error: \" + event.target.errorCode\r\n        );\r\n      };\r\n    };\r\n  });\r\n}\r\n\r\nfunction saveUserAccount(username, password) {\r\n  // Open or create IndexedDB database\r\n  const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n  request.onerror = function (event) {\r\n    console.error(\"Database error: \" + event.target.errorCode);\r\n  };\r\n\r\n  request.onsuccess = function (event) {\r\n    const db = event.target.result;\r\n    // Create transaction and object store\r\n    const transaction = db.transaction([\"users\"], \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n    // Add user account data\r\n    const account = { username: username, password: password };\r\n    const addRequest = store.add(account);\r\n\r\n    addRequest.onsuccess = function (event) {\r\n      console.log(\"User account added successfully\");\r\n    };\r\n\r\n    addRequest.onerror = function (event) {\r\n      console.error(\"Error adding user account: \" + event.target.errorCode);\r\n    };\r\n  };\r\n}\r\nasync function getUsername() {\r\n  let username = \"\";\r\n  await getUsersFromDb()\r\n    .then((records) => {\r\n      if (records.length == 1) {\r\n        // emit guest\r\n        username = records[0];\r\n      } else {\r\n        // @TODO\r\n        // emit username using a proper logic\r\n        username = records[0] != \"user\" ? records[0] : records[1];\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"ERROR: \", error);\r\n    });\r\n\r\n  return username;\r\n}\r\n\r\nfunction getUsersFromDb() {\r\n  return new Promise((resolve, reject) => {\r\n    // Open the IndexedDB database\r\n    const request = indexedDB.open(\"astroOS\", 1);\r\n\r\n    request.onerror = function (event) {\r\n      reject(\"Database error: \" + event.target.errorCode);\r\n    };\r\n\r\n    request.onsuccess = function (event) {\r\n      const db = event.target.result;\r\n      // Start a new transaction to read from the object store\r\n      const transaction = db.transaction([\"users\"], \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      // Open a cursor to iterate over all records\r\n      const cursorRequest = store.openCursor();\r\n\r\n      const records = [];\r\n\r\n      cursorRequest.onsuccess = function (event) {\r\n        const cursor = event.target.result;\r\n        if (cursor) {\r\n          // Push record into array\r\n          records.push(cursor.value.username);\r\n          // Move to next record\r\n          cursor.continue();\r\n        } else {\r\n          // Resolve promise with all records\r\n          resolve(records);\r\n        }\r\n      };\r\n\r\n      cursorRequest.onerror = function (event) {\r\n        reject(\"Error fetching records: \" + event.target.errorCode);\r\n      };\r\n    };\r\n  });\r\n}\r\n\n\n//# sourceURL=webpack://astroos/./src/user/user_api.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/init.js");
/******/ 	
/******/ })()
;